{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Charlie Billadeau\\\\desktop\\\\new-react-projects\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["C:\\Users\\Charlie Billadeau\\desktop\\new-react-projects\\streams\\client\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAWzCC,WAXyC,GAW3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKM,WAAL,CAAiBJ,IAAjB,CAHH,CADF;AAOD,KApBwC;;AAAA,SAsBzCK,QAtByC,GAsB9BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWb,YAAX,CAAwBY,UAAxB;AACD,KAxBwC;AAAA;;AACzCF,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF;;AAiBDM,EAAAA,MAAM,GAAG;AACP,WACE;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,SAAS,EAAE,KAAKR,WAFlB;AAGE,MAAA,KAAK,EAAC,aAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EASE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,CADF;AAaD;;AAxCwC;;AAyC1C;;AAED,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;AAC/B,QAAMK,MAAM,GAAG,EAAf;;AACA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CATD;;AAWA,MAAMG,WAAW,GAAGtB,SAAS,CAAC;AAC5BuB,EAAAA,IAAI,EAAE,cADsB;AAE5BL,EAAAA;AAF4B,CAAD,CAAT,CAGjBf,YAHiB,CAApB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCoB,WAAhC,CAAf","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport { createStream } from '../../actions';\r\n\r\nclass StreamCreate extends React.Component {\r\n  renderError({ error, touched }) {\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderInput = ({ input, label, meta }) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\" />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSubmit = formValues => {\r\n    this.props.createStream(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\r\n        <Field\r\n          name=\"title\"\r\n          component={this.renderInput}\r\n          label=\"Enter Title\"/>\r\n        <Field\r\n          name=\"description\"\r\n          component={this.renderInput}\r\n          label=\"Enter Description\" />\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n  if (!formValues.title) {\r\n    errors.title = \"You must enter a title\"\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\"\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst formWrapped = reduxForm({\r\n  form: 'streamCreate',\r\n  validate\r\n})(StreamCreate);\r\n\r\nexport default connect(null, { createStream })(formWrapped);"]},"metadata":{},"sourceType":"module"}